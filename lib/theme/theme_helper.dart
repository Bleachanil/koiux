// import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA700,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.teal300,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(2.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 2,
        space: 2,
        color: colorScheme.onPrimaryContainer,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray800,
          fontSize: 16.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray800,
          fontSize: 14.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w300,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray500,
          fontSize: 12.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: Color(0XFF444745),
          fontSize: 40.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        headlineLarge: TextStyle(
          color: appTheme.black90001,
          fontSize: 32.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w600,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.errorContainer,
          fontSize: 24.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        labelLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 12.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.teal40001,
          fontSize: 10.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.gray600,
          fontSize: 20.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 16.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray800,
          fontSize: 14.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF3799D2),
    primaryContainer: Color(0XFF003829),
    secondaryContainer: Color(0XFFFF8B20),

    // Error colors
    errorContainer: Color(0XFF0076E3),
    onError: Color(0XFFFF79E1),

    // On colors(text colors)
    onPrimary: Color(0XFF191919),
    onPrimaryContainer: Color(0XFFECEEEB),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF020202);
  Color get black90001 => Color(0XFF000000);

  // Blue
  Color get blue50 => Color(0XFFD4EAFE);
  Color get blue500 => Color(0XFF2995F9);

  // BlueGray
  Color get blueGray400 => Color(0XFF7D8A96);
  Color get blueGray40001 => Color(0XFF7D968B);
  Color get blueGray500 => Color(0XFF5E947C);
  Color get blueGray600 => Color(0XFF615D91);
  Color get blueGray900 => Color(0XFF2E312F);

  // DeepOrange
  Color get deepOrange900 => Color(0XFFAA5D04);

  // Gray
  Color get gray100 => Color(0XFFF2F4F1);
  Color get gray10001 => Color(0XFFF5F5F5);
  Color get gray200 => Color(0XFFEDEDED);
  Color get gray20001 => Color(0XFFE9EBE9);
  Color get gray20002 => Color(0XFFE9EAE8);
  Color get gray400 => Color(0XFFBFC9C3);
  Color get gray40001 => Color(0XFFC6B9B9);
  Color get gray50 => Color(0XFFF9FBF8);
  Color get gray500 => Color(0XFF8E928F);
  Color get gray600 => Color(0XFF707974);
  Color get gray60001 => Color(0XFF747875);
  Color get gray700 => Color(0XFF545454);
  Color get gray800 => Color(0XFF444745);
  Color get gray80001 => Color(0XFF404944);
  Color get gray80002 => Color(0XFF505050);
  Color get gray900 => Color(0XFF002117);

  // Green
  Color get green500 => Color(0XFF4FD244);
  Color get greenA200 => Color(0XFF63DBB6);

  // Indigo
  Color get indigo50 => Color(0XFFE6E9F0);

  // LightBlue
  Color get lightBlue800 => Color(0XFF0163BD);

  // Orange
  Color get orange200 => Color(0XFFFFC47F);
  Color get orange600 => Color(0XFFF68500);

  // Purple
  Color get purple300 => Color(0XFFA753E9);

  // Red
  Color get red100 => Color(0XFFFFE0D0);
  Color get red600 => Color(0XFFDD3730);
  Color get redA100 => Color(0XFFFF897A);
  Color get redA10001 => Color(0XFFFF897D);
  Color get redA200 => Color(0XFFFF5449);
  Color get redA20001 => Color(0XFFFF5842);

  // Teal
  Color get teal100 => Color(0XFFB1D6EC);
  Color get teal300 => Color(0XFF44BF99);
  Color get teal400 => Color(0XFF1ABF96);
  Color get teal40001 => Color(0XFF1CA380);
  Color get teal50 => Color(0XFFD4F4E4);
  Color get teal500 => Color(0XFF18A381);
  Color get teal5001 => Color(0XFFCCF1E5);
  Color get teal700 => Color(0XFF008768);
  Color get teal800 => Color(0XFF006C52);
  Color get teal900 => Color(0XFF00513D);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
